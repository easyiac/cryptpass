openapi: 3.1.0
info:
  title: cryptpass
  description: CryptPass API.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.26
paths:
  /api/v1/keyvalue/data/{key}:
    get:
      tags:
      - Key-Value
      summary: Fetch the value for a specific key.
      description: Retrieve the value associated with a given key. Optionally, a specific version can be requested. Returns the value as JSON if found, or an error if the key does not exist or access is unauthorized.
      operationId: get_data
      parameters:
      - name: key
        in: path
        description: Key to read the value for.
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int32
      responses:
        '200':
          description: Value found for the key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueData'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
    put:
      tags:
      - Key-Value
      summary: Create or update the value for a key.
      description: 'Create a new value or update the existing value for a given key. Supports versioning: if a version is provided, updates that version; otherwise, creates a new version. Accepts a JSON body with the value.'
      operationId: update_data
      parameters:
      - name: key
        in: path
        description: Key to write or update.
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int32
      requestBody:
        description: JSON object containing the value to store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyValueData'
        required: true
      responses:
        '201':
          description: Value written or updated successfully.
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: Key not found for update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
    delete:
      tags:
      - Key-Value
      summary: Delete a key or a specific version.
      description: Delete the value for a given key, or a specific version if provided. If the key or version does not exist, the operation is a no-op. Returns no content on success.
      operationId: delete_data
      parameters:
      - name: key
        in: path
        description: Key to delete.
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int32
      responses:
        '204':
          description: Key or version deleted (or did not exist).
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
  /api/v1/keyvalue/details/{key}:
    get:
      tags:
      - Key-Value
      summary: Get metadata for a key.
      description: Retrieve metadata (such as creation time, version, etc.) for a given key. Does not return the value itself. Useful for auditing and management.
      operationId: details
      parameters:
      - name: key
        in: path
        description: Key to fetch metadata for.
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int32
      responses:
        '200':
          description: Metadata for the key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValue'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
  /api/v1/keyvalue/list:
    get:
      tags:
      - Key-Value
      summary: List all keys in the store.
      description: Retrieve a flat list of all keys currently stored in the key-value store. Useful for administrative and backup purposes.
      operationId: list_all_keys
      responses:
        '200':
          description: List of all keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueList'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: No keys found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
  /api/v1/keyvalue/list/{key}:
    get:
      tags:
      - Key-Value
      summary: List nested keys under a prefix.
      description: List all keys that are nested under the given key prefix. Useful for browsing hierarchical key structures.
      operationId: list_selective_keys
      parameters:
      - name: key
        in: path
        description: Key prefix to list nested keys for.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: List of nested keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueList'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: Key prefix not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
  /api/v1/users/user/{username}:
    get:
      tags:
      - Users
      summary: Fetch user details by username.
      description: Retrieve the user record for a given username. Returns user details if found, or an error if the user does not exist or access is unauthorized.
      operationId: get_user
      parameters:
      - name: username
        in: path
        description: Username of the user to fetch.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
    put:
      tags:
      - Users
      summary: Create or update a user by username.
      description: Create a new user or update an existing user record for the specified username. Accepts a JSON body with user details. Returns the updated user record.
      operationId: create_update_user
      parameters:
      - name: username
        in: path
        description: Username of the user to create or update.
        required: true
        schema:
          type: string
      requestBody:
        description: User object to create or update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        '201':
          description: User created or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '404':
          description: User not found for update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security:
      - cryptpass_auth_info: []
  /perpetual/health:
    get:
      tags:
      - Perpetual
      summary: Check application health status.
      description: Returns the health status of the CryptPass application, including whether it's running, initialized, and unlocked. Useful for monitoring, readiness checks, and troubleshooting. The response includes detailed status flags and any error messages.
      operationId: health_handler
      responses:
        '200':
          description: Health check successful. Application status details returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security: []
  /perpetual/initialize:
    post:
      tags:
      - Perpetual
      summary: Initialize the application and generate master key.
      description: Initializes the CryptPass application, generating and storing the master encryption key. This endpoint should be called once during setup. Returns details about the generated key.
      operationId: init_app_handler
      responses:
        '201':
          description: Application initialized. Master key details returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationInitializationDetails'
        '400':
          description: 'Bad request: initialization failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security: []
  /perpetual/login:
    post:
      tags:
      - Perpetual
      summary: Authenticate and obtain a login token.
      description: Authenticate a user using username and password. Returns a JWT token on successful authentication, which can be used for subsequent authorized requests. Responds with error details if authentication fails.
      operationId: login_handler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Login successful. JWT token returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 'Unauthorized: invalid credentials.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security: []
  /perpetual/unlock:
    post:
      tags:
      - Perpetual
      summary: Unlock the application with a master key.
      description: Unlocks the CryptPass application by providing the master encryption key. This endpoint is required to enable access to encrypted data after startup. Returns internal encryption key details (not the actual key).
      operationId: unlock_handler
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockDetails'
        required: true
      responses:
        '200':
          description: Application unlocked. Internal encryption key details returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalEncryptionKeyDetails'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptPassErrorDetails'
      security: []
components:
  schemas:
    ApplicationInitializationDetails:
      type: object
      required:
      - master_key
      properties:
        master_key:
          type: string
    CryptPassErrorDetails:
      type: object
      required:
      - error
      properties:
        correlation_id:
          type:
          - string
          - 'null'
        error:
          type: string
    Health:
      type: object
      required:
      - up
      - initialized
      - unlocked
      properties:
        error:
          type:
          - string
          - 'null'
        initialized:
          type: boolean
        unlocked:
          type: boolean
        up:
          type: boolean
    InternalEncryptionKeyDetails:
      type: object
      required:
      - encrypted_key
      - hash
      - encryptor_hash
      properties:
        encrypted_key:
          type: string
        encryptor_hash:
          type: string
        hash:
          type: string
    KeyValue:
      type: object
      required:
      - key
      - encrypted_value
      - version
      - deleted
      - last_updated_at
      - encryptor_hash
      properties:
        deleted:
          type: boolean
        encrypted_value:
          type: string
        encryptor_hash:
          type: string
        key:
          type: string
        last_updated_at:
          type: integer
          format: int64
        version:
          type: integer
          format: int32
    KeyValueData:
      type: object
      required:
      - data
      properties:
        data: {}
    KeyValueList:
      type: object
      required:
      - data
      properties:
        data:
          type: array
          items:
            type: string
    LoginRequest:
      type: object
      properties:
        password:
          type:
          - string
          - 'null'
        username:
          type:
          - string
          - 'null'
    LoginResponse:
      type: object
      properties:
        token:
          type:
          - string
          - 'null'
        type:
          type:
          - string
          - 'null'
    Privilege:
      type: object
      required:
      - name
      properties:
        name:
          $ref: '#/components/schemas/PrivilegeType'
    PrivilegeType:
      type: string
      enum:
      - SUDO
      - NO_SUDO
    Role:
      type: object
      required:
      - name
      - privileges
      properties:
        name:
          $ref: '#/components/schemas/RoleType'
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
    RoleType:
      type: string
      enum:
      - ADMIN
      - USER
    UnlockDetails:
      type: object
      required:
      - master-encryption-key
      properties:
        master-encryption-key:
          type: string
    Users:
      type: object
      required:
      - password_last_changed
      - roles
      - last_login
      - locked
      - enabled
      properties:
        email:
          type:
          - string
          - 'null'
        enabled:
          type: boolean
        last_login:
          type: integer
          format: int64
        locked:
          type: boolean
        password:
          type:
          - string
          - 'null'
        password_last_changed:
          type: integer
          format: int64
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
  securitySchemes:
    cryptpass_auth_info:
      type: apiKey
      in: header
      name: X-CRYPTPASS-KEY
tags:
- name: Perpetual
  description: Core endpoints.
- name: Key-Value
  description: Key-Value related endpoints.
- name: Users
  description: User related endpoints.
